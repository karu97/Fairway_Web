// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Booking {
  id           String        @id @default(cuid())
  type         BookingType
  hotelSlug    String?
  tourSlug     String?
  startDate    DateTime
  endDate      DateTime
  guests       Int
  rooms        Int?
  totalPrice   Int?          // in cents
  currency     String        @default("USD")
  status       BookingStatus @default(PENDING)
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  contactName  String
  contactEmail String
  contactPhone String?
  notes        String?
  stripeSessionId String?
  paymentIntentId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("bookings")
}

enum BookingType {
  HOTEL
  TOUR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
}

model Inquiry {
  id          String   @id @default(cuid())
  type        String   // "general", "hotel", "tour", "corporate"
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      String   @default("new") // "new", "in_progress", "resolved"
  metadata    Json?    // Additional data like hotelSlug, tourSlug, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inquiries")
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

model PageView {
  id        String   @id @default(cuid())
  path      String
  locale    String
  userAgent String?
  ip        String?
  referrer  String?
  timestamp DateTime @default(now())

  @@map("page_views")
}
